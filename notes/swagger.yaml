swagger: "2.0"
info:
  description: "Users microservice for Notes App."
  version: "1.0.0"
  title: "Notes App Users"
  contact:
    email: "sukiasiansam@gmail.com"
host: "users"
basePath: "/api/v1"
tags:
- name: "auth"
  description: "Authorization and authentication requests."
- name: "users"
  description: "CRUD operations."
schemes:
- "http"
paths:
  /auth/signup:
    post:
      tags:
      - "auth"
      summary: "Create a new user and endow a JWT token."
      description: "Create new users."
      operationId: "signup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object and gave a JWT token."
          required: true
          schema:
            $ref: "#/definitions/CreateUserData"
      responses:
        "201":
            description: "User created"
        "500":
          description: "Validation failure or internal server error"
          
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Login"
      description: "Get JWT token by providing credentials."
      operationId: "login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object and gave a JWT token."
          required: true
          schema:
            $ref: "#/definitions/LoginUserData"
      responses:
        "200":
            description: "You are successfully logged in."
        "403":
          description: "Incorrect username or password."
  
  /auth/logout:
    get:
      tags:
      - "auth"
      summary: "Logout."
      description: "Removes JWT from cookies."
      operationId: "logout"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security: 
        - users_auth: []
      responses:
        "200":
          description: "You are successfully logged out."
        "401": 
          description: "Non-authorized."
        "500":
          description: "Internal Server Error."
  
  /users:
    delete: 
      tags: 
      - "users"
      summary: "Delete user."
      description: "Deletes user if provided password is correct."
      operationId: "deleteUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema: 
            $ref: "#/definitions/DeleteUserData"
      security: 
        - users_auth: []
      responses:
        "200":
            description: "User is deleted."
        "401":
          description: "Unauthorized."
        "404": 
          description: "User is not found."
        "500":
          description: "User is not found."
  
  /users/{id}:
    get:
      tags:
      - "users"
      summary: "Get user."
      description: "Get user by id."
      operationId: "getUserById"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "Created user object and gave a JWT token."
          required: true
          type: string
      security: 
        - users_auth: []
      responses:
        "200":
            description: "User is found."
        "401":
          description: "Unauthorized."
        "404": 
          description: "User is not found."
  
    put:
      tags:
      - "users"
      summary: "Edit user."
      description: "Edit user data."
      operationId: "editUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "Checks whether the account belongs to user and if yes then change data."
          required: true
          type: string
        
        - in: "body"
          name: "body"
          required: true
          schema: 
            $ref: "#/definitions/EditUserData"
      security: 
        - users_auth: []
      responses:
        "200":
            description: "User data is changed."
        "401":
          description: "Forbidden."
        "404":
          description: "User is not found"
        "500": 
          description: "Validation or internal server error."
        
securityDefinitions:
  users_auth:
    type: "basic"
    
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      firstName:
        type: "string"
      middleName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
      
  CreateUserData: 
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      passwordConfirmation:
        type: "string"
      middleName?:
        type: "string"
    xml:
      name: "CreateUserData"
  
  LoginUserData:
    type: "object"
    properties:
      email:
        type: "string"
      password: 
        type: "string"
    xml: 
      name: "LoginUserData"
  
  EditUserData:
    type: "object"
    properties: 
      email?: 
        type: "string"
      firstName?:
        type: "string"
      lastName?: 
        type: "string"
      middleName?: 
        type: "string"
    xml: 
      name: "EditUserData"
      
  DeleteUserData: 
    type: "object"
    properties: 
      password: 
        type: "string"
    xml: 
      name: "DeleteUserData"
  
  UserID: 
    type: "object"
    properties: 
      password: 
        type: "string"
    xml:
      name: "UserID"